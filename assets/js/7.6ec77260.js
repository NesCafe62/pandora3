(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{205:function(v,_,t){"use strict";t.r(_);var s=t(28),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"концепция"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#концепция"}},[v._v("#")]),v._v(" Концепция")]),v._v(" "),t("p",[v._v("При разработке готовых элементов для повторного использования следует придерживаться следующих принципов:")]),v._v(" "),t("ul",[t("li",[v._v("Открытость к добавлению новой функциональности")]),v._v(" "),t("li",[v._v("Возможности изменять стандартное поведение")]),v._v(" "),t("li",[v._v("Переопределение поведения предпочтительнее предоставлению настроек")])]),v._v(" "),t("h2",{attrs:{id:"цеnь-проекта"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#цеnь-проекта"}},[v._v("#")]),v._v(" Цель проекта")]),v._v(" "),t("p",[v._v("Cовместить "),t("strong",[v._v("минимализм")]),v._v(" и "),t("strong",[v._v("легкость повторного использования имеющегося кода")]),v._v(", при этом "),t("strong",[v._v("не закрывая возможности для дальнейшей кастомизации")]),v._v(".")]),v._v(" "),t("h3",{attrs:{id:"минимаnизм"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#минимаnизм"}},[v._v("#")]),v._v(" Минимализм")]),v._v(" "),t("p",[v._v("Недостаток минимализма в том, что реализованной функциональности может быть недостаточно для конкретной задачи. Этот недостаток будет компенсороваться "),t("strong",[v._v("кастомизируемостью")]),v._v(" (возможностью надстроек).")]),v._v(" "),t("ul",[t("li",[v._v("Увеличение быстродействия")]),v._v(" "),t("li",[v._v("Уменьшение порога вхождения. Меньший объем кода уменьшает временя на понмание и рефакторинг.")]),v._v(" "),t("li",[v._v("Уменьшение количества ошибок")])]),v._v(" "),t("h3",{attrs:{id:"повторное-испоnьзование"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#повторное-испоnьзование"}},[v._v("#")]),v._v(" Повторное-использование")]),v._v(" "),t("p",[v._v("Повторное использование любят все, оно позволяет существенно сократь время разработки. Но бывает, что готовые решения "),t("strong",[v._v("плохо кастомизируемы")]),v._v(" или "),t("strong",[v._v("громоздки")]),v._v(" или используют "),t("strong",[v._v("больше зависимостей чем необходимо")]),v._v(" для своей работы. Поэтому "),t("strong",[v._v("соблюдать")]),v._v(" его нужно "),t("strong",[v._v("не во вред всем остальным пунктам")]),v._v(".")]),v._v(" "),t("p",[v._v("Инструменты достижения:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("Отказ от монолитности")]),v._v(" в пользу "),t("strong",[v._v("модульности")]),v._v(" и "),t("strong",[v._v("использования интерфейсов")]),v._v(".")]),v._v(" "),t("li",[v._v("При разработке функциональности под конкретную задачу абстрагироваться от нее и "),t("strong",[v._v("создать максимально типовое решение")]),v._v(". Или обойтись быстрым решением под задачу, а разработку типового решения предоставить команде или сообществу. В дальнейшем можно будет заменить быстрое решение на типовое с добавлением надстройки под задачу.")])]),v._v(" "),t("h3",{attrs:{id:"кастомизация"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#кастомизация"}},[v._v("#")]),v._v(" Кастомизация")]),v._v(" "),t("p",[v._v("Многие знают какого это, когда подходящая готовая функциональность имеет особенности, которые хочется изменить, но разработчики не предоставили инструментов для этого. Конечно, делать максимум настроек это тупиковый путь, потому что утяжеляет решение (препятствует минимализму) и все равно что-то остается неучтенным. Предпочтительнее другой способ: оставить потенциал для изменений и надстроек, но видение таких точек роста приходит с опытом.\nИнструменты достижения:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("Расширяемость")]),v._v(". Использование "),t("strong",[v._v("наследования")]),v._v(" для "),t("strong",[v._v("переопределения логики")]),v._v(". Всегда оставлять точки роста для дальнейших надстроек, продумать какие части можно вынести в отдельные методы для дальнейшего переопределения.")]),v._v(" "),t("li",[v._v("Снова "),t("strong",[v._v("модульность")]),v._v(". Если какая-то часть плохо подходит под задачу, ее можно заменить на другую, не требуя изменения других частей, что позволяет обойтись минимальными затратами.")]),v._v(" "),t("li",[t("strong",[v._v("Переопределение шаблонов")]),v._v(" в плагинах и виджетах (данный прием успешно используется в CMS Joomla, но, к сожалению, ограничивается только шаблонами)")])]),v._v(" "),t("h3",{attrs:{id:"избежание-nавинных-зависимостей-dependency-hell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#избежание-nавинных-зависимостей-dependency-hell"}},[v._v("#")]),v._v(" Избежание лавинных зависимостей (Dependency-hell)")]),v._v(" "),t("p",[v._v("Большинству знакома эта ситуацией, когда установка небольшой библиотеки приводит к загрузке половины базовых компонентов фреймворка Symfony, даже если большая часть кода в них не будет использоваться в данном проекте. Для некоторых установка лишних зависимостей не является проблемой. Но она начинает ощущаться при возникновении конфликтов зависимотей, которых, я верю, можно избежать уменьшением количества неиспользуемых зависимостей.")]),v._v(" "),t("p",[v._v("Предлагаемое решение: если часть функций или классов библиотеки "),t("strong",[v._v("A")]),v._v(" использует "),t("strong",[v._v("B")]),v._v(" а другая часть использует "),t("strong",[v._v("C")]),v._v(", требуется разбить библиотеку "),t("strong",[v._v("A")]),v._v(" на две части, каждая из которых будет иметь свои зависимости. Тогда если потребутся первая часть функций, будет загружена только используемая библиотека "),t("strong",[v._v("B")]),v._v(".")]),v._v(" "),t("p",[v._v("Конечно в каждом конкретном случае надо разбираться отдельно. Чаще всего зависимости библиотек будут связаны по смыслу. И если появляются отклонения от данной тенденции, тогда и стоит обратить на это внимание.")])])}),[],!1,null,null,null);_.default=r.exports}}]);